# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'OK2Ship.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui
from PyQt5.QtWidgets import *
from PyQt5.QtWidgets import QWidget, QMainWindow, QApplication
import sys
from datetime import datetime
import os
import json

from plugin.TestData import TestData
from plugin.TestWindow import ErrorInfoList, ErrorInfoList_PyQT5

stage_list = ['AF_UP', 'AF_DOWN', 'CCL', 'FQC', 'OBA', 'ALS']


def return_time_str():
    nowtime = datetime.now()
    return nowtime.strftime("%Y%m%d%H%M%S")


def log_print(log, txt):
    print(txt)
    log.write(txt)


class OK2ShipReviewer_GUI(QWidget):
    def __init__(self):
        super(OK2ShipReviewer_GUI, self).__init__()
        self.setFixedSize(600, 640)
        self.setWindowTitle("Camera Test OK2Delivery Reviewer - By Amazon Camera SQM")

        self.label_font = QtGui.QFont()
        self.label_font.setFamily("Arial")
        self.label_font.setPointSize(10)

        self.setWindowIcon(QtGui.QIcon('../image/delivery.ico'))
        self.screen_list = []
        self.setupUi()

        self.repeating_window = ErrorInfoList_PyQT5()

    def setupUi(self):
        self.ok2ship_lbl = QLabel("Pending for OK2Ship parts list folder:", self)
        self.ok2ship_lbl.setGeometry(QtCore.QRect(70, 30, 250, 30))
        self.ok2ship_lbl.setFont(self.label_font)
        self.ok2ship_lbl.setObjectName("ok2ship_lbl")

        self.ok2ship_lEdit = QLineEdit(self)
        self.ok2ship_lEdit.setGeometry(QtCore.QRect(340, 30, 170, 30))
        self.ok2ship_lEdit.setMaximumSize(QtCore.QSize(300, 40))
        self.ok2ship_lEdit.setMaxLength(120)
        self.ok2ship_lEdit.setText(".\\OK2S_Data\\OK2Ship")
        self.ok2ship_lEdit.setObjectName("ok2ship_lEdit")

        # the table of the stages, folders and maximums test times allowed
        self.gridLayoutWidget = QWidget(self)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(30, 55, 540, 450))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")

        self.stage_lbl = QLabel("Stage", self.gridLayoutWidget)
        self.stage_lbl.setMaximumSize(QtCore.QSize(150, 40))
        self.stage_lbl.setFont(self.label_font)
        self.stage_lbl.setAlignment(QtCore.Qt.AlignCenter)
        self.stage_lbl.setObjectName("stage_lbl")

        self.folder_lbl = QLabel(self.gridLayoutWidget)
        self.folder_lbl.setMaximumSize(QtCore.QSize(500, 40))
        self.folder_lbl.setFont(self.label_font)
        self.folder_lbl.setText("Data Folder")
        self.folder_lbl.setAlignment(QtCore.Qt.AlignCenter)
        self.folder_lbl.setObjectName("folder_lbl")

        self.allowed_times_lbl = QLabel(self.gridLayoutWidget)
        self.allowed_times_lbl.setMaximumSize(QtCore.QSize(200, 40))
        # self.label_4.setFont(font)
        self.allowed_times_lbl.setAlignment(QtCore.Qt.AlignCenter)
        self.allowed_times_lbl.setObjectName("allowed_times_lbl")
        self.allowed_times_lbl.setText("Maximum Allowed Test Times\n(0 means no limit)")

        self.gridLayout.addWidget(self.stage_lbl, 0, 0, 1, 1)
        self.gridLayout.addWidget(self.folder_lbl, 0, 1, 1, 1)
        self.gridLayout.addWidget(self.allowed_times_lbl, 0, 2, 1, 1)

        self.stage_box_0 = QComboBox(self.gridLayoutWidget)
        self.stage_box_0.setObjectName("stage_box_0")
        self.stage_box_0.addItems(stage_list)
        self.stage_box_0.setCurrentIndex(0)
        self.stage_box_0.setEditable(True)
        self.gridLayout.addWidget(self.stage_box_0, 1, 0, 1, 1)

        self.stage_box_1 = QComboBox(self.gridLayoutWidget)
        self.stage_box_1.setObjectName("stage_box_1")
        self.stage_box_1.addItems(stage_list)
        self.stage_box_1.setCurrentIndex(1)
        self.stage_box_1.setEditable(True)
        self.gridLayout.addWidget(self.stage_box_1, 2, 0, 1, 1)

        self.stage_box_2 = QComboBox(self.gridLayoutWidget)
        self.stage_box_2.setObjectName("stage_box_2")
        self.stage_box_2.addItems(stage_list)
        self.stage_box_2.setCurrentIndex(2)
        self.stage_box_2.setEditable(True)
        self.gridLayout.addWidget(self.stage_box_2, 3, 0, 1, 1)

        self.stage_box_3 = QComboBox(self.gridLayoutWidget)
        self.stage_box_3.setObjectName("stage_box_3")
        self.stage_box_3.addItems(stage_list)
        self.stage_box_3.setCurrentIndex(3)
        self.stage_box_3.setEditable(True)
        self.gridLayout.addWidget(self.stage_box_3, 4, 0, 1, 1)

        self.stage_box_4 = QComboBox(self.gridLayoutWidget)
        self.stage_box_4.setObjectName("stage_box_4")
        self.stage_box_4.addItems(stage_list)
        self.stage_box_4.setCurrentIndex(4)
        self.stage_box_4.setEditable(True)
        self.gridLayout.addWidget(self.stage_box_4, 5, 0, 1, 1)

        self.stage_box_5 = QComboBox(self.gridLayoutWidget)
        self.stage_box_5.setObjectName("stage_box_5")
        self.stage_box_5.addItems(stage_list)
        self.stage_box_5.setCurrentIndex(-1)
        self.stage_box_5.setEditable(True)
        self.gridLayout.addWidget(self.stage_box_5, 6, 0, 1, 1)

        self.stage_box_6 = QComboBox(self.gridLayoutWidget)
        self.stage_box_6.setObjectName("stage_box_6")
        self.stage_box_6.addItems(stage_list)
        self.stage_box_6.setCurrentIndex(-1)
        self.stage_box_6.setEditable(True)
        self.gridLayout.addWidget(self.stage_box_6, 7, 0, 1, 1)

        self.stage_box_7 = QComboBox(self.gridLayoutWidget)
        self.stage_box_7.setObjectName("stage_box_7")
        self.stage_box_7.addItems(stage_list)
        self.stage_box_7.setCurrentIndex(-1)
        self.stage_box_7.setEditable(True)
        self.gridLayout.addWidget(self.stage_box_7, 8, 0, 1, 1)

        self.stage_box_8 = QComboBox(self.gridLayoutWidget)
        self.stage_box_8.setObjectName("stage_box_8")
        self.stage_box_8.addItems(stage_list)
        self.stage_box_8.setCurrentIndex(-1)
        self.stage_box_8.setEditable(True)
        self.gridLayout.addWidget(self.stage_box_8, 9, 0, 1, 1)

        # Distribute the line editors for folder names
        self.folder_ledit_0 = QLineEdit(self.gridLayoutWidget)
        self.folder_ledit_0.setObjectName("folder_ledit_0")
        self.folder_ledit_0.setText(r".\OK2S_Data\AF_UP")
        self.gridLayout.addWidget(self.folder_ledit_0, 1, 1, 1, 1)

        self.folder_ledit_1 = QLineEdit(self.gridLayoutWidget)
        self.folder_ledit_1.setObjectName("folder_ledit_1")
        self.folder_ledit_1.setText(r".\OK2S_Data\AF_DOWN")
        self.gridLayout.addWidget(self.folder_ledit_1, 2, 1, 1, 1)

        self.folder_ledit_2 = QLineEdit(self.gridLayoutWidget)
        self.folder_ledit_2.setObjectName("folder_ledit_2")
        self.folder_ledit_2.setText(r".\OK2S_Data\AF_CCL")
        self.gridLayout.addWidget(self.folder_ledit_2, 3, 1, 1, 1)

        self.folder_ledit_3 = QLineEdit(self.gridLayoutWidget)
        self.folder_ledit_3.setObjectName("folder_ledit_3")
        self.folder_ledit_3.setText(r".\OK2S_Data\AF_FQC")
        self.gridLayout.addWidget(self.folder_ledit_3, 4, 1, 1, 1)

        self.folder_ledit_4 = QLineEdit(self.gridLayoutWidget)
        self.folder_ledit_4.setObjectName("folder_ledit_4")
        self.folder_ledit_4.setText(r".\OK2S_Data\AF_OBA")
        self.gridLayout.addWidget(self.folder_ledit_4, 5, 1, 1, 1)

        self.folder_ledit_5 = QLineEdit(self.gridLayoutWidget)
        self.folder_ledit_5.setObjectName("folder_ledit_4")
        self.gridLayout.addWidget(self.folder_ledit_5, 6, 1, 1, 1)

        self.folder_ledit_6 = QLineEdit(self.gridLayoutWidget)
        self.folder_ledit_6.setObjectName("folder_ledit_4")
        self.gridLayout.addWidget(self.folder_ledit_6, 7, 1, 1, 1)

        self.folder_ledit_7 = QLineEdit(self.gridLayoutWidget)
        self.folder_ledit_7.setObjectName("folder_ledit_4")
        self.gridLayout.addWidget(self.folder_ledit_7, 8, 1, 1, 1)

        self.folder_ledit_8 = QLineEdit(self.gridLayoutWidget)
        self.folder_ledit_8.setObjectName("folder_ledit_4")
        self.gridLayout.addWidget(self.folder_ledit_8, 9, 1, 1, 1)

        self.allow_times_0 = QSpinBox(self.gridLayoutWidget)
        self.allow_times_0.setObjectName("allow_times_0")
        self.gridLayout.addWidget(self.allow_times_0, 1, 2, 1, 1)
        self.allow_times_1 = QSpinBox(self.gridLayoutWidget)
        self.allow_times_1.setObjectName("allow_times_1")
        self.gridLayout.addWidget(self.allow_times_1, 2, 2, 1, 1)
        self.allow_times_2 = QSpinBox(self.gridLayoutWidget)
        self.allow_times_2.setObjectName("allow_times_2")
        self.gridLayout.addWidget(self.allow_times_2, 3, 2, 1, 1)
        self.allow_times_3 = QSpinBox(self.gridLayoutWidget)
        self.allow_times_3.setObjectName("allow_times_3")
        self.gridLayout.addWidget(self.allow_times_3, 4, 2, 1, 1)
        self.allow_times_4 = QSpinBox(self.gridLayoutWidget)
        self.allow_times_4.setObjectName("allow_times_4")
        self.gridLayout.addWidget(self.allow_times_4, 5, 2, 1, 1)
        self.allow_times_5 = QSpinBox(self.gridLayoutWidget)
        self.allow_times_5.setObjectName("allow_times_5")
        self.gridLayout.addWidget(self.allow_times_5, 6, 2, 1, 1)
        self.allow_times_6 = QSpinBox(self.gridLayoutWidget)
        self.allow_times_6.setObjectName("allow_times_6")
        self.gridLayout.addWidget(self.allow_times_6, 7, 2, 1, 1)
        self.allow_times_7 = QSpinBox(self.gridLayoutWidget)
        self.allow_times_7.setObjectName("allow_times_7")
        self.gridLayout.addWidget(self.allow_times_7, 8, 2, 1, 1)
        self.allow_times_8 = QSpinBox(self.gridLayoutWidget)
        self.allow_times_8.setObjectName("allow_times_8")
        self.gridLayout.addWidget(self.allow_times_8, 9, 2, 1, 1)

        self.gridLayout.setColumnStretch(0, 2)
        self.gridLayout.setColumnStretch(1, 5)
        self.gridLayout.setColumnStretch(2, 1)
        self.gridLayout.setRowStretch(0, 3)
        self.gridLayout.setRowStretch(1, 1)
        self.gridLayout.setRowStretch(2, 1)
        self.gridLayout.setRowStretch(3, 1)
        self.gridLayout.setRowStretch(4, 1)
        self.gridLayout.setRowStretch(5, 1)
        self.gridLayout.setRowStretch(6, 1)
        self.gridLayout.setRowStretch(7, 1)
        self.gridLayout.setRowStretch(8, 1)
        self.gridLayout.setRowStretch(9, 1)

        self.output_lbl = QLabel(self)
        self.output_lbl.setGeometry(QtCore.QRect(120, 510, 170, 30))
        self.output_lbl.setFont(self.label_font)
        self.output_lbl.setText("Output Datalog Path:")
        self.output_lbl.setObjectName("output_lbl")

        self.output_ledit = QLineEdit(self)
        self.output_ledit.setGeometry(QtCore.QRect(300, 510, 170, 30))
        self.output_ledit.setMaximumSize(QtCore.QSize(300, 40))
        self.output_ledit.setMaxLength(120)
        self.output_ledit.setText(r".\OK2S_Data\Output")
        self.output_ledit.setObjectName("output_ledit")

        self.btn_widget = QWidget(self)
        self.btn_widget.setGeometry(QtCore.QRect(60, 560, 480, 35))
        self.btn_widget.setObjectName("btn_widget")
        self.btn_widget_layout = QHBoxLayout(self.btn_widget)
        self.btn_widget_layout.setContentsMargins(0, 0, 0, 0)
        self.btn_widget_layout.setObjectName("btn_widget_layout")

        self.start_btn = QPushButton('Start', self.btn_widget)
        self.start_btn.setObjectName("start_btn")
        self.btn_widget_layout.addWidget(self.start_btn)
        self.start_btn.clicked.connect(self.screen_parts)

        self.save_settings_btn = QPushButton('Save settings', self.btn_widget)
        self.save_settings_btn.setObjectName("save_settings_btn")
        self.btn_widget_layout.addWidget(self.save_settings_btn)
        self.save_settings_btn.clicked.connect(self.save_settings)

        self.load_settings_btn = QPushButton('Load settings', self.btn_widget)
        self.load_settings_btn.setObjectName("load_settings_btn")
        self.btn_widget_layout.addWidget(self.load_settings_btn)
        self.load_settings_btn.clicked.connect(self.load_settings)

        self.quit_btn = QPushButton('Quit', self.btn_widget)
        self.quit_btn.setObjectName("pushButton_4")
        self.btn_widget_layout.addWidget(self.quit_btn)
        self.quit_btn.clicked.connect(lambda: self.close())


    def save_settings(self):
        self.collect_comp_data()
        self.settings = {'ok2ship_path': self.ok2ship_lEdit.text(),
                         'output_path': self.output_ledit.text(),
                         'compare_data_dict': self.compare_data_dict}
        settings_json = json.dumps(self.settings)
        json_path, _ = QFileDialog.getSaveFileName(self, 'Save Setting Files', '', "Json Files (*.json)")
        if len(json_path) == 0:
            QMessageBox.warning(self, 'No name defined','No export table name defined!')
        else:
            if not (os.path.splitext(json_path)[1] in ['.json', '.JSON']):
                json_path = json_path + '.json'
            with open(json_path, 'w') as json_f:
                json.dump(settings_json, json_f)
            QMessageBox.about(self, '', 'Already save the settings')

    def load_settings(self):
        target_json, _ = QFileDialog.getOpenFileName(self, 'Load Json Setting Files', '', "Json Files (*.json)")
        if len(target_json) == 0:
            QMessageBox.warning(self, 'No name defined','No json file name is defined!')
        else:
            if (os.path.splitext(target_json)[1] in ['.json', '.JSON']):
                with open(target_json, 'r') as jason_f:
                    loaded_settings = json.load(jason_f)
                json_loaded = json.loads(loaded_settings)
                self.ok2ship_lEdit.setText(str(json_loaded['ok2ship_path']))
                self.output_ledit.setText(str(json_loaded['output_path']))
                data_info_dict = json_loaded['compare_data_dict']

                len_data = len(data_info_dict)
                if len_data > 0:
                    data0_dict = data_info_dict[0]
                    self.stage_box_0.setCurrentText(data0_dict['type'])
                    self.folder_ledit_0.setText(data0_dict['link'])
                    self.allow_times_0.setValue(int(data0_dict['retest']))
                if len_data > 1:
                    data1_dict = data_info_dict[1]
                    self.stage_box_1.setCurrentText(data1_dict['type'])
                    self.folder_ledit_1.setText(data1_dict['link'])
                    self.allow_times_1.setValue(int(data1_dict['retest']))
                if len_data > 2:
                    data2_dict = data_info_dict[2]
                    self.stage_box_2.setCurrentText(data2_dict['type'])
                    self.folder_ledit_2.setText(data2_dict['link'])
                    self.allow_times_2.setValue(int(data2_dict['retest']))
                if len_data > 3:
                    data3_dict = data_info_dict[3]
                    self.stage_box_3.setCurrentText(data3_dict['type'])
                    self.folder_ledit_3.setText(data3_dict['link'])
                    self.allow_times_3.setValue(int(data3_dict['retest']))
                if len_data > 4:
                    data4_dict = data_info_dict[4]
                    self.stage_box_4.setCurrentText(data4_dict['type'])
                    self.folder_ledit_4.setText(data4_dict['link'])
                    self.allow_times_4.setValue(int(data4_dict['retest']))
                if len_data > 5:
                    data5_dict = data_info_dict[5]
                    self.stage_box_5.setCurrentText(data5_dict['type'])
                    self.folder_ledit_5.setText(data5_dict['link'])
                    self.allow_times_5.setValue(int(data5_dict['retest']))
                if len_data > 6:
                    data6_dict = data_info_dict[6]
                    self.stage_box_6.setCurrentText(data6_dict['type'])
                    self.folder_ledit_6.setText(data6_dict['link'])
                    self.allow_times_6.setValue(int(data6_dict['retest']))
                if len_data > 7:
                    data7_dict = data_info_dict[7]
                    self.stage_box_7.setCurrentText(data7_dict['type'])
                    self.folder_ledit_7.setText(data7_dict['link'])
                    self.allow_times_7.setValue(int(data7_dict['retest']))
                if len_data > 8:
                    data8_dict = data_info_dict[8]
                    self.stage_box_8.setCurrentText(data8_dict['type'])
                    self.folder_ledit_8.setText(data8_dict['link'])
                    self.allow_times_8.setValue(int(data8_dict['retest']))

                QMessageBox.about(self, 'Load finishes', 'Already finish loading the settings')

    def collect_comp_data(self):
        self.compare_data_dict = []
        if len(self.stage_box_0.currentText()) > 0:
            data0_dict = {'type': self.stage_box_0.currentText(),
                          'link': self.folder_ledit_0.text(),
                          'retest': self.allow_times_0.value()
                          }
            self.compare_data_dict.append(data0_dict)

        if len(self.stage_box_1.currentText()) > 0:
            data1_dict = {'type': self.stage_box_1.currentText(),
                          'link': self.folder_ledit_1.text(),
                          'retest': self.allow_times_1.value()
                          }
            self.compare_data_dict.append(data1_dict)

        if len(self.stage_box_2.currentText()) > 0:
            data2_dict = {'type': self.stage_box_2.currentText(),
                          'link': self.folder_ledit_2.text(),
                          'retest': self.allow_times_2.value()
                          }
            self.compare_data_dict.append(data2_dict)

        if len(self.stage_box_3.currentText()) > 0:
            data3_dict = {'type': self.stage_box_3.currentText(),
                          'link': self.folder_ledit_3.text(),
                          'retest': self.allow_times_3.value()
                          }
            self.compare_data_dict.append(data3_dict)

        if len(self.stage_box_4.currentText()) > 0:
            data4_dict = {'type': self.stage_box_4.currentText(),
                          'link': self.folder_ledit_4.text(),
                          'retest': self.allow_times_4.value()
                          }
            self.compare_data_dict.append(data4_dict)

        if len(self.stage_box_5.currentText()) > 0:
            data5_dict = {'type': self.stage_box_5.currentText(),
                          'link': self.folder_ledit_5.text(),
                          'retest': self.allow_times_5.value()
                          }
            self.compare_data_dict.append(data5_dict)

        if len(self.stage_box_6.currentText()) > 0:
            data6_dict = {'type': self.stage_box_6.currentText(),
                          'link': self.folder_ledit_6.text(),
                          'retest': self.allow_times_6.value()
                          }
            self.compare_data_dict.append(data6_dict)

        if len(self.stage_box_7.currentText()) > 0:
            data7_dict = {'type': self.stage_box_7.currentText(),
                          'link': self.folder_ledit_7.text(),
                          'retest': self.allow_times_7.value()
                          }
            self.compare_data_dict.append(data7_dict)

        if len(self.stage_box_8.currentText()) > 0:
            data8_dict = {'type': self.stage_box_8.currentText(),
                          'link': self.folder_ledit_8.text(),
                          'retest': self.allow_times_8.value()
                          }
            self.compare_data_dict.append(data8_dict)

    def screen_parts(self):
        self.screen_list = []
        if len(self.ok2ship_lEdit.text()) == 0:
            QMessageBox.warning(self, 'Warning', 'No ok2ship folder is defined!')
        elif len(self.output_ledit.text()) == 0:
            QMessageBox.warning(self, 'Warning', 'No output folder is defined!')
        else:
            start_time_str = str(return_time_str())
            target_datalog = os.path.join(self.output_ledit.text(), 'Output_datalog_' + start_time_str + '.txt')
            target_csv = os.path.join(self.output_ledit.text(), 'Screened_parts_' + start_time_str + '.csv')

            with open(target_datalog, 'w') as datalog:
                print('\n\n\n')

                log_print(datalog, 'Start to check the OK2Ship parts in the folder of %s at the time of %s ... \n\n' % (
                    self.output_ledit.text(), start_time_str))
                log_print(datalog, '====================================================\n')
                log_print(datalog, 'Import the data from OK2Ship list...\n')

                ok2ship_data_link = self.ok2ship_lEdit.text()
                self.OK2SHIP = TestData()  # pathdir = ok2ship_data_link, print_file_name=False)
                self.OK2SHIP.read_data_from_files(pathdir=ok2ship_data_link, ifPrintName=False)

                if len(self.OK2SHIP.value) == 0:
                    QMessageBox.warning(self, 'Warning', 'No serial ID data could be found in the OK2ship list')
                    log_print(datalog, 'No serial ID data could be found in the OK2ship list! --- Program Terminated\n')
                else:
                    self.OK2SHIP.calc_parameters()
                    self.OK2SHIP.calc_yield()
                    self.OK2SHIP.calc_retest()
                    log_print(datalog, '\n')
                    if self.OK2SHIP.retest_count > 0:
                        QMessageBox.warning(self, 'Repeating ID in Shipping list',
                                            '% d parts are repeating parts!' % self.OK2SHIP.retest_count)

                        self.repeating_window.input_text(self.OK2SHIP.retest_serial)
                        self.repeating_window.setWindowTitle('Repeating Part ID List')
                        self.repeating_window.setFixedSize(300, 200)
                        self.repeating_window.exec_()

                        log_print(datalog, 'Some repeating serial IDs could be found in the ok2ship list:')
                        for each_id in self.OK2SHIP.retest_serial:
                            log_print(datalog, each_id + '\n')
                            self.screen_list.append(
                                ["'" + str(each_id), 'OK2Ship list', 'Repeating id in shipping list'])
                    else:
                        log_print(datalog, 'All parts in ok2ship list are unique, no repeating parts\n')
                    log_print(datalog, '\n')
                    self.collect_comp_data()
                    self.checking_id_list = self.OK2SHIP.uni_serial
                    log_print(datalog, '---------------------------------------------------\n\n')

                    for comp_data in self.compare_data_dict:
                        # stage_issue_part_list = []
                        comp_name = str(comp_data['type'])  # comp_name: the stage name for comparison
                        if len(str(comp_data['link'])) == 0:
                            log_print(datalog, 'No folder is defined for stage %s...\n' % comp_name)
                        else:
                            log_print(datalog, 'Import the data of stage %s from the folder %s ...\n' % (
                                comp_name, str(comp_data['link'])))
                            Comp_RawData = TestData()  # str(comp_data['link']), print_file_name=False)
                            Comp_RawData.read_data_from_files(pathdir=str(comp_data['link']), ifPrintName=False)
                            Comp_RawData.calc_parameters()

                            if len(Comp_RawData.value) == 0:
                                QMessageBox.warning(self, 'Warning',
                                                    'No test data could be found in the folder of %s stage!' % comp_name)
                                log_print(datalog,
                                          'No test data could be found in the folder of %s stage!\n' % comp_name)
                            else:
                                Comp_RawData.calc_parameters()
                                Comp_RawData.calc_yield()

                                target_export_file = os.path.join(self.output_ledit.text(), comp_name + '.csv')
                                Comp_RawData.export_to_excel(target_export_file, "")
                                log_print(datalog,
                                          'The data is exported to the %s in output folder\n' % target_export_file)
                                Comp_RawData.calc_retest()
                                log_print(datalog,
                                          'In this stage, total %d test records.\n' % Comp_RawData.module_count)
                                log_print(datalog, 'Total pass parts count: %d \n' % Comp_RawData.pass_count)
                                log_print(datalog,
                                          'Total retest parts count: %d \n\n' % Comp_RawData.retest_total_count)
                                allowed_retest = int(comp_data['retest'])

                                for single_id in self.checking_id_list:
                                    single_id = single_id.replace("'", "")
                                    # print(Comp_RawData.last_result(single_id, return_value = 'time'))
                                    if single_id not in Comp_RawData.uni_serial:
                                        log_print(datalog, '%s module is not in the parts list of stage %s!\n' % (
                                            str(single_id), comp_name))
                                        self.screen_list.append(
                                            ["'" + str(single_id), comp_name, 'No record in test history'])
                                        # stage_issue_part_list.append(single_id)
                                    else:
                                        last_test_result = Comp_RawData.last_result(single_id)
                                        if last_test_result[0] == 'PASS' or last_test_result[0] == 'NA':
                                            test_times = last_test_result[2]
                                            if 0 < allowed_retest < test_times:
                                                # stage_issue_part_list.append(single_id)
                                                self.screen_list.append(
                                                    ["'" + str(single_id), comp_name, 'Exceed the test times limits(%d '
                                                                                      'vs %d)' % (
                                                         test_times, allowed_retest)])
                                                log_print(datalog,
                                                          '%s test for %d times, exceeded the maximum test times '
                                                          'allowed: %d\n' % (
                                                              single_id, test_times, allowed_retest))
                                                test_log = last_test_result[3]
                                                test_time_result_log = zip(list(test_log['start_time']),
                                                                           list(test_log['test_result']))
                                                for single_test_log in test_time_result_log:
                                                    log_print(datalog, 'test time: %s, test result: %s\n' % (
                                                        single_test_log[0], single_test_log[1]))
                                                log_print(datalog, '\n')
                                        else:
                                            self.screen_list.append(
                                                ["'" + str(single_id), comp_name, 'Final result is NG'])
                                            # stage_issue_part_list.append(single_id)
                                            log_print(datalog, "%s's test result is not PASS in stage %s!\n" % (
                                                str(single_id), comp_name))
                                            # log_print(datalog, 'Actual test result is "%s"\n\n' % last_test_result[0])
                                            test_log = last_test_result[3]
                                            test_time_result_log = zip(list(test_log['start_time']),
                                                                       list(test_log['test_result']))
                                            for single_test_log in test_time_result_log:
                                                log_print(datalog, 'test time: %s, test result: %s\n' % (
                                                    single_test_log[0], single_test_log[1]))
                                            log_print(datalog, '\n')

                        log_print(datalog, 'Finish the analysis of the stage %s.\n' % comp_name)
                        log_print(datalog, '---------------------------------------------------\n\n')
                    log_print(datalog, 'All the screen progress is finished. Total %d parts have been screened' % len(
                        self.screen_list))
                    if len(self.screen_list) > 0:
                        # print(self.screen_list)
                        with open(target_csv, 'w') as screen_csv:
                            for part in self.screen_list:
                                screen_csv.writelines(','.join(part) + '\n')


if __name__ == '__main__':
    app = QApplication(sys.argv)

    main = OK2ShipReviewer_GUI()
    main.show()
    #main.center()

    sys.exit(app.exec_())
